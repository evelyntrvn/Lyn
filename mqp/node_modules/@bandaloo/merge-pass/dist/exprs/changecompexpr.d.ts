import { AllVals, Vec } from "../exprtypes";
import { Operator as Op, PrimitiveFloat } from "./expr";
export declare type ArithOp = "/" | "*" | "+" | "-";
/** change component expression */
export declare class ChangeCompExpr<T extends Vec, U extends AllVals> extends Op<T> {
    originalVec: T;
    newVal: U;
    constructor(vec: T, setter: U, comps: string, op?: ArithOp);
    /** set the original vector */
    setOriginal(originalVec: T): void;
    /** set the neww vector */
    setNew(newVal: U | number): void;
}
export declare function changecomp<T extends Vec>(vec: T, setter: number, comps: string, op?: ArithOp): ChangeCompExpr<T, PrimitiveFloat>;
export declare function changecomp<T extends Vec, U extends AllVals>(vec: T, setter: U, comps: string, op?: ArithOp): ChangeCompExpr<T, U>;
