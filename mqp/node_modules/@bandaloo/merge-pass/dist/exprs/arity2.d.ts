import { AllVals, Float, Vec2, Vec3, Vec4 } from "../exprtypes";
import { Operator, PrimitiveFloat } from "./expr";
/** valid function names for [[a2]] */
declare type Arity2HomogenousName = "pow" | "step" | "mod" | "atan";
/** arity 2 homogenous function expression */
export declare class Arity2HomogenousExpr<T extends AllVals, U extends AllVals> extends Operator<T> {
    val1: T;
    val2: U;
    constructor(name: Arity2HomogenousName, val1: T, val2: U);
    /** set the first value being passed into the arity 2 homogenous function */
    setFirstVal(val1: T | number): void;
    /** set the second value being passed into the arity 2 homogenous function */
    setSecondVal(val2: U | number): void;
}
export declare function a2<T extends Float>(name: Arity2HomogenousName, val1: T, val2: number): Arity2HomogenousExpr<T, PrimitiveFloat>;
export declare function a2<U extends Float>(name: Arity2HomogenousName, val1: number, val2: U): Arity2HomogenousExpr<PrimitiveFloat, U>;
export declare function a2(name: Arity2HomogenousName, val1: number, val2: number): Arity2HomogenousExpr<PrimitiveFloat, PrimitiveFloat>;
export declare function a2<T extends Float, U extends Float>(name: Arity2HomogenousName, val1: T, val2: U): Arity2HomogenousExpr<T, U>;
export declare function a2<T extends Vec2, U extends Vec2>(name: Arity2HomogenousName, val1: T, val2: U): Arity2HomogenousExpr<T, U>;
export declare function a2<T extends Vec3, U extends Vec3>(name: Arity2HomogenousName, val1: T, val2: U): Arity2HomogenousExpr<T, U>;
export declare function a2<T extends Vec4, U extends Vec4>(name: Arity2HomogenousName, val1: T, val2: U): Arity2HomogenousExpr<T, U>;
export {};
