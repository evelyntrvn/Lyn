import { Float, Vec2, Vec3, Vec4 } from "../exprtypes";
import { EffectLoop } from "../mergepass";
import { PrimitiveFloat } from "./expr";
import { TernaryExpr } from "./ternaryexpr";
export declare function region<T extends Float, U extends Float>(space: (Float | number)[] | Float | number, success: T, failure: U, not?: boolean): TernaryExpr<T, U>;
export declare function region<T extends Float>(space: (Float | number)[] | Float | number, success: T, failure: number, not?: boolean): TernaryExpr<T, PrimitiveFloat>;
export declare function region<U extends Float>(space: (Float | number)[] | Float | number, success: number, failure: U, not?: boolean): TernaryExpr<PrimitiveFloat, U>;
export declare function region(space: (Float | number)[] | Float | number, success: number, failure: number, not?: boolean): TernaryExpr<PrimitiveFloat, PrimitiveFloat>;
export declare function region<T extends Vec2, U extends Vec2>(space: (Float | number)[] | Float | number, success: T, failure: U, not?: boolean): TernaryExpr<T, U>;
export declare function region<T extends Vec3, U extends Vec3>(space: (Float | number)[] | Float | number, success: T, failure: U, not?: boolean): TernaryExpr<T, U>;
export declare function region<T extends Vec4, U extends Vec4>(space: (Float | number)[] | Float | number, success: T, failure: U, not?: boolean): TernaryExpr<T, U>;
export declare function region<U extends Vec4>(space: (Float | number)[] | Float | number, success: EffectLoop, failure: U, not?: boolean): EffectLoop;
export declare function region<T extends Vec4>(space: (Float | number)[] | Float | number, success: T, failure: EffectLoop, not?: boolean): EffectLoop;
export declare function region<U extends Vec4>(space: (Float | number)[] | Float | number, success: EffectLoop, failure: EffectLoop, not?: boolean): EffectLoop;
