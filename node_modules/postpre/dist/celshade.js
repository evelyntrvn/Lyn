"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.celshade = exports.CelShade = void 0;
const merge_pass_1 = require("@bandaloo/merge-pass");
class CelShade extends merge_pass_1.WrappedExpr {
    constructor(mult, bump, center, edge) {
        const multFloat = merge_pass_1.float(mult);
        const bumpFloat = merge_pass_1.float(bump);
        const centerFloat = merge_pass_1.float(center);
        const edgeFloat = merge_pass_1.float(edge);
        const smooth = merge_pass_1.cfloat(merge_pass_1.tag `(smoothstep(-${edgeFloat} + ${centerFloat}, ${edgeFloat} + ${centerFloat}, ${merge_pass_1.rgb2hsv(merge_pass_1.fcolor())}.z) * ${multFloat} + ${bumpFloat})`);
        const expr = merge_pass_1.hsv2rgb(merge_pass_1.changecomp(merge_pass_1.rgb2hsv(merge_pass_1.fcolor()), smooth, "z"));
        super(expr);
        this.multFloat = multFloat;
        this.bumpFloat = bumpFloat;
        this.centerFloat = centerFloat;
        this.edgeFloat = edgeFloat;
        this.mult = mult;
        this.bump = bump;
        this.center = center;
        this.edge = edge;
    }
    setMult(mult) {
        this.multFloat.setVal(merge_pass_1.wrapInValue(mult));
        this.mult = merge_pass_1.wrapInValue(mult);
    }
    setBump(bump) {
        this.bumpFloat.setVal(merge_pass_1.wrapInValue(bump));
        this.bump = merge_pass_1.wrapInValue(bump);
    }
    setCenter(center) {
        this.centerFloat.setVal(merge_pass_1.wrapInValue(center));
        this.center = merge_pass_1.wrapInValue(center);
    }
    setEdge(edge) {
        this.edgeFloat.setVal(merge_pass_1.wrapInValue(edge));
        this.edge = merge_pass_1.wrapInValue(edge);
    }
}
exports.CelShade = CelShade;
function celshade(mult = merge_pass_1.mut(0.8), bump = merge_pass_1.mut(0.3), center = merge_pass_1.mut(0.3), edge = merge_pass_1.mut(0.03)) {
    return new CelShade(merge_pass_1.wrapInValue(mult), merge_pass_1.wrapInValue(bump), merge_pass_1.wrapInValue(center), merge_pass_1.wrapInValue(edge));
}
exports.celshade = celshade;
