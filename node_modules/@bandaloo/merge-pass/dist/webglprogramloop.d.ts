import { Expr, Needs } from "./exprs/expr";
import { LoopInfo, TexInfo, UniformLocs } from "./mergepass";
export declare type WebGLProgramElement = WebGLProgramLeaf | WebGLProgramLoop[];
export declare function updateNeeds(acc: Needs, curr: Needs): Needs;
/** values to set the default uniforms `uTime` and `uMouse` to */
interface DefaultUniforms {
    /** `uTime` uniform value */
    timeVal: number;
    /** x component of `uMouse` uniform */
    mouseX: number;
    /** y component of `uMouse` uniform */
    mouseY: number;
}
export declare class WebGLProgramLeaf {
    program: WebGLProgram;
    totalNeeds: Needs;
    effects: Expr[];
    constructor(program: WebGLProgram, totalNeeds: Needs, effects: Expr[]);
}
/** recursive data structure of compiled programs */
export declare class WebGLProgramLoop {
    programElement: WebGLProgramElement;
    loopInfo: LoopInfo;
    last: boolean;
    timeLoc?: WebGLUniformLocation;
    mouseLoc?: WebGLUniformLocation;
    countLoc?: WebGLUniformLocation;
    counter: number;
    constructor(programElement: WebGLProgramElement, loopInfo: LoopInfo, gl: WebGL2RenderingContext);
    /** get all needs from all programs */
    getTotalNeeds(): Needs;
    /**
     * recursively uses all programs in the loop, binding the appropriate
     * textures and setting the appropriate uniforms; the user should only have
     * to call [[draw]] on [[Merger]] and never this function directly
     */
    run(gl: WebGL2RenderingContext, tex: TexInfo, framebuffer: WebGLFramebuffer, uniformLocs: UniformLocs, last: boolean, defaultUniforms: DefaultUniforms, outerLoop?: WebGLProgramLoop): void;
    delete(gl: WebGL2RenderingContext): void;
}
export {};
