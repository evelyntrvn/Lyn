import { TypeString, Vec } from "../exprtypes";
import { ExprFloat, ExprVec2, ExprVec3, ExprVec4 } from "./expr";
/** @ignore */
export declare function typeStringToLength(str: TypeString): 1 | 2 | 3 | 4;
/**
 * checks if components accessing a vector are legal. components can be illegal
 * if they mix sets (e.g. `v.rgzw`) or contain characters outside of any set
 * (e.g. `v.lmno`)
 * @param comps components string
 * @param vec vector being accessed
 */
export declare function checkLegalComponents(comps: string, vec: Vec): void;
/** get component expression */
export declare class GetCompExpr<T extends Vec> extends ExprFloat {
    vec1Min: T;
    constructor(vec: T, comps: string);
    setVec(vec: T): void;
}
/** get 2 components expression */
export declare class Get2CompExpr<T extends Vec> extends ExprVec2 {
    vec2Min: T;
    constructor(vec: T, comps: string);
    setVec(vec: T): void;
}
/** get 3 components expression */
export declare class Get3CompExpr<T extends Vec> extends ExprVec3 {
    vec3Min: T;
    constructor(vec: T, comps: string);
    setVec(vec: T): void;
}
/** get 3 components expression */
export declare class Get4CompExpr<T extends Vec> extends ExprVec4 {
    vec4Min: T;
    constructor(vec: T, comps: string);
    setVec(vec: T): void;
}
/**
 * creates an expression that gets 1 component from a vector
 * @param vec the vector to get components of
 * @param comps components string
 */
export declare function getcomp<T extends Vec>(vec: T, comps: string): GetCompExpr<T>;
/**
 * creates an expression that gets 2 components from a vector
 * @param vec the vector to get components of
 * @param comps components string
 */
export declare function get2comp<T extends Vec>(vec: T, comps: string): Get2CompExpr<T>;
/**
 * creates an expression that gets 3 components from a vector
 * @param vec the vector to get components of
 * @param comps components string
 */
export declare function get3comp<T extends Vec>(vec: T, comps: string): Get3CompExpr<T>;
/**
 * creates an expression that gets 4 components from a vector
 * @param vec the vector to get components of
 * @param comps components string
 */
export declare function get4comp<T extends Vec>(vec: T, comps: string): Get4CompExpr<T>;
