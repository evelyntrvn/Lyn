import { Float, Vec4 } from "../exprtypes";
import { ExprVec4, PrimitiveFloat, PrimitiveVec4 } from "./expr";
/** depth info to occlussion info expression */
export declare class DepthToOcclusionExpr extends ExprVec4 {
    depthCol: Vec4;
    newCol: Vec4;
    threshold: Float;
    constructor(depthCol?: Vec4, newCol?: Vec4, threshold?: Float);
    setDepthColor(depthCol: PrimitiveVec4): void;
    setNewColor(newCol: PrimitiveVec4): void;
    setThreshold(threshold: PrimitiveFloat | number): void;
}
/**
 * converts a `1 / distance` depth texture to an occlusion texture, with all
 * occluded geometry being rendered as black
 * @param depthCol the color representing the inverse depth (defaults to
 * sampling from channel 0)
 * @param newCol the color to replace unoccluded areas by (defaults to white
 * and is mutable by default)
 * @param threshold values below this are not occluded (set to something low,
 * like 0.1 or lower; defaults to 0.01 and is mutable by default)
 */
export declare function depth2occlusion(depthCol: Vec4, newCol: Vec4, threshold: Float | number): DepthToOcclusionExpr;
