import { Float, Vec2 } from "../exprtypes";
import { ExprFloat, PrimitiveVec2 } from "./expr";
/** Perlin noise expression */
export declare class PerlinExpr extends ExprFloat {
    pos: Vec2;
    constructor(pos: Vec2);
    /** sets the position to calculate noise value of */
    setPos(pos: PrimitiveVec2): void;
}
/**
 * creates a perlin noise expression; values range from -1 to 1 but they tend
 * to be grayer than the [[simplex]] implementation
 * @param pos position
 */
export declare function perlin(pos: Vec2): PerlinExpr;
/**
 * take any function from a position to a float, and repeatedly sum calls to it
 * with doubling frequency and halving amplitude (works well with [[simplex]]
 * and [[perlin]])
 * @param pos position
 * @param octaves how many layers deep to make the fractal
 * @param func the function to fractalize
 */
export declare function fractalize(pos: Vec2, octaves: number, func: (pos: Vec2) => ExprFloat): Float;
