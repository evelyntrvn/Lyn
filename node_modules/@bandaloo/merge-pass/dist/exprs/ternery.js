"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ternary = exports.TernaryExpr = void 0;
const expr_1 = require("./expr");
function genTernarySourceList(floats, success, failure) {
    const sourceList = {
        sections: ["(("],
        values: [],
    };
    let counter = 0;
    // generate the boolean expression
    for (const f of floats) {
        counter++;
        const last = counter === floats.length;
        sourceList.values.push(f);
        sourceList.sections.push(` > 0${last ? ") ? " : " && "}`);
    }
    // generate the success expression and colon
    sourceList.values.push(success);
    sourceList.sections.push(":");
    // generate the failure expression
    sourceList.values.push(failure);
    sourceList.sections.push(")");
    return sourceList;
}
class TernaryExpr extends expr_1.Operator {
    constructor(floats, success, failure) {
        super(success, genTernarySourceList(floats, success, failure), [
            ...Array.from(new Array(3), (val, index) => "uFloat" + index),
            "uSuccess",
            "uFailure",
        ]);
        this.success = success;
        this.failure = failure;
    }
}
exports.TernaryExpr = TernaryExpr;
function ternary(floats, success, failure) {
    return new TernaryExpr(floats, success, failure);
}
exports.ternary = ternary;
