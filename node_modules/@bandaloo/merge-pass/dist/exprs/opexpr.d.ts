import { AllVals, Float, Vec, Vec2, Vec3, Vec4 } from "../exprtypes";
import { ArithOp } from "./changecompexpr";
import { Operator as Op, PrimitiveFloat } from "./expr";
export declare class OpExpr<T extends AllVals, U extends AllVals> extends Op<T> {
    left: T;
    right: U;
    constructor(left: T, op: ArithOp, right: U);
    setLeft(left: T | number): void;
    setRight(right: U | number): void;
}
export declare function op<T extends Float>(left: T, op: ArithOp, right: number): OpExpr<T, PrimitiveFloat>;
export declare function op<U extends Float>(left: number, op: ArithOp, right: U): OpExpr<PrimitiveFloat, U>;
export declare function op(left: number, op: ArithOp, right: number): OpExpr<PrimitiveFloat, PrimitiveFloat>;
export declare function op<T extends Float, U extends Float>(left: T, op: ArithOp, right: U): OpExpr<T, U>;
export declare function op<T extends Vec2, U extends Vec2>(left: T, op: ArithOp, right: U): OpExpr<T, U>;
export declare function op<T extends Vec3, U extends Vec3>(left: T, op: ArithOp, right: U): OpExpr<T, U>;
export declare function op<T extends Vec4, U extends Vec4>(left: T, op: ArithOp, right: U): OpExpr<T, U>;
export declare function op<T extends Vec, U extends Float>(left: T, op: ArithOp, right: U): OpExpr<T, U>;
export declare function op<T extends Vec>(left: T, op: ArithOp, right: number): OpExpr<T, PrimitiveFloat>;
