import { AllVals } from "../exprtypes";
import { Operator, PrimitiveFloat } from "./expr";
/** valid function names for [[a1]] */
declare type Arity1HomogenousName = "sin" | "cos" | "tan" | "sinh" | "cosh" | "tanh" | "asin" | "acos" | "atan" | "asinh" | "acosh" | "atanh" | "floor" | "ceil" | "abs" | "sign" | "fract" | "min" | "max";
/** arity 1 homogenous function expression */
export declare class Arity1HomogenousExpr<T extends AllVals> extends Operator<T> {
    val: T;
    constructor(val: T, operation: Arity1HomogenousName);
    /** set the value being passed into the arity 1 homogenous function */
    setVal(val: T | number): void;
}
export declare function a1<T extends AllVals>(name: Arity1HomogenousName, val: T): Arity1HomogenousExpr<T>;
export declare function a1<T extends AllVals>(name: Arity1HomogenousName, val: number): Arity1HomogenousExpr<PrimitiveFloat>;
export {};
