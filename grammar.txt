start "start" = term +
term "term" = body:(keyword / sentence) _ { return body; } // keyword to word

sentence = "{" expr "}" { return expr.join("") } / regular
expr = regular*
regular = [^{}]+ { return text(); }

_ "whitespace" = [ \t\n\r]*

int = i:[0-9]* { return `${i.join("")}`; }
float = left:[0-9]+ "." right:[0-9]+ { return parseFloat(left.join("") + "." +   right.join("")); } 

primary = int / float

// conditional = cond:ifStatement / while / elseif  "(" condition ")" sentence { return cond; }
ifStatement = "if" expr "then" sentence "else" sentence /
   "if" expr "then" sentence  // conditional statement, what to return?

/****** Key Words ******/
keyword "keyword" =  diffuse / audio / time / circle / rect / 
					triangle / polygon / ellipse / line / floor /
                    add / mult / subtract / divide / modulo / 
                    colorA / colorB / rateA / rateB / feed / kill / $[^{} \t\n\r] +

diffuse  = "diffuse" { return "@diffuse"; }	// main function for reactive diffusion

// Input and other
audio = "audio" { return "@audio";} //i want to be able to set audio on and off
time = "time" { return Date.getTime; }

// Shapes and styles
circle = "circle" { return "@circle"; }
rect = "rect" { return "@rect"; }
triangle = "triangle" { return "@triangle"; }
polygon = "polygon" { return "@polygon"; }
ellipse = "ellipse" { return "@ellipse"; }
line = "line" { return "@line"; }

bkgdColor = "bkgd" { return "@bkgd" }
hexChar = [0-9A-Fa-f] {return hexChar; }
hex = h:[0-9A-Fa-f]*{ return `${h.join("")}` } //is there anyways to specify a certain amount


// Math
floor = "floor" { return "@floor"; }
add = "+" { return "@+"; }
mult = "*" { return "@*"; }
subtract = "-" { return "@-"; }
divide = "/" { return "@/"; }
modulo = "%" { return "@%"; }
//sin = "sin(" p:int ")" { return Math.sin(p); }


/****** Diffuse attributes ****/
colorA = "colorA(" h:hex ")"{ return `@colorA(${h})` ; }
colorB = "colorB(" h:hex ")"{ return `@colorB(${h})` ; }
rateA = "rateA(" r:float ")"{ return `@rateA(${r})` ; } //change to primary
rateB = "rateB(" r:float ")"{ return `@rateB(${r})` ; } 
feed = "feed(" f:float ")" { return `@feed(${f})` ; } 
kill = "kill(" k:float ")" { return `@kill(${k})` ; } 

/*start "start" = term +
term "term" = body:(word / sentence) _ { return body; }

sentence = "{" expr:regular* "}" { return expr.join("") } / regular
regular = [^{}]+ { return text(); }

word "word" = svg / circle / rect / line / ellipse / triangle / export / style / loop / end_loop / filter / slider / polygon / path / polar / random_number / random_color / random_theme / text / pattern / gradient / image / color / opacity / rotate / skew / radius / repeat / attr / order / define / get / parent / group / move / center / copy / all / duplicate / link / outline / flip / diag / size / scale / stack / translate / animate_color / animate_filter / animate / add / mult / subtract / divide / modulo / floor / clear / pulse / now / sine / ignore / sin / rand / $[^{} \t\n\r]+

svg = "svg" { return "@svg"; }
circle = "circle" { return "@circle"; }
rect = "rect" { return "@rect"; }
triangle = "triangle" { return "@triangle"; }
polygon = "polygon" { return "@polygon"; }
ellipse = "ellipse" { return "@ellipse"; }
line = "line" { return "@line"; }
path = "path" { return "@path"; }
text = "text" { return "@text"; }
polar = "polar" { return "@polar"; }

pattern = "pattern" { return "@pattern"; }
gradient = "gradient" { return "@gradient"; }
image = "image" { return "@image"; }

style = "style" { return "@style"; }
filter = "filter" { return "@filter"; }
color = "color" { return "@color"; }
opacity = "opacity" { return "@opacity"; }
radius = "radius" { return "@radius"; }
flip = "flip" { return "@flip"; }
order = "order" { return "@order"; }
repeat = "repeat" { return "@repeat"; }
diag = "diag" { return "@diag"; }
outline = "outline" { return "@outline"; }
rotate = "rotate" { return "@rotate"; }
move = "move" { return "@move"; }
translate = "translate" { return "@translate"; }
center = "center" { return "@center"; }
size = "size" { return "@size"; }
scale = "scale" { return "@scale"; }
skew = "skew" { return "@skew"; }
attr = "attr" { return "@attr"; }
stack = "stack" { return "@stack";}

end_loop = "end-loop" { return "@end-loop"; }
loop = "loop" { return "@loop"; }
all = "all" { return "@all"; }
group = "group" { return "@group"; }
copy = "copy" { return "@copy"; }
duplicate = "duplicate" { return "@duplicate"; }
link = "link" { return "@link"; }
slider = "slider" { return "@slider"; }
clear = "clear" { return "@clear"; }
parent = "parent" { return "@parent"; }
ignore = "ignore" { return "@ignore"; }

rand = "rand" {return Math.floor(Math.random() * (50 - 0) + 0)}

random_number = "rand-n" { return "@random-number"; }
random_color = "rand-c" { return "@random-color"; }
random_theme = "rand-t" { return "@random-theme"; }
define = "define" { return "@define"; }
get = "get" { return "@get"; }
export = "export" { return "@export"; }

animate = "animate" { return "@animate"; }
animate_color = "animate-color" { return "@animate-color"; }
animate_filter = "animate-filter" { return "@animate-filter"; }

pulse = "pulse" {return "@pulse"}
now = "now" {return Date.now()}
sine = "sine" {return Math.sin(Date.now())}

floor = "floor" { return "@floor"; }
add = "+" { return "@+"; }
mult = "*" { return "@*"; }
subtract = "-" { return "@-"; }
divide = "/" { return "@/"; }
modulo = "%" { return "@%"; }
sin = "sin" { return "@sin"; }

_ "whitespace" = [ \t\n\r]* */
        